//
//  ProfileSettingsView.swift
//  DentistCalendar
//
//  Created by –î–∞–Ω–∏–∫ üí™ on 10/5/20.
//

import SwiftUI
import Amplify
import ApphudSDK
struct ProfileSettingsView: View {
    @EnvironmentObject var sessionManager: SessionManager
    @AppStorage("loggedWithSocialProvider") var isProviderSocial = false
    @State var isAlertPresented = false
    @StateObject var profileData = ProfileSettingsViewModel()
    var body: some View {
        Form {
            Section(header: Text("–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")) {
                HStack {
                    Text("–ò–º—è").foregroundColor(.gray)
                    Spacer()
                    TextField("–ò–º—è", text: $profileData.firstName).multilineTextAlignment(.trailing)
                    
                }
                HStack {
                    Text("–§–∞–º–∏–ª–∏—è").foregroundColor(.gray)
                    Spacer()
                    TextField("–§–∞–º–∏–ª–∏—è", text: $profileData.secondName).multilineTextAlignment(.trailing)
                }
                Button(action: {
                    profileData.updateFullname()
                }, label: {
                    if profileData.isLoading {
                        ProgressView().frame(width: UIScreen.main.bounds.width - 20, height: 25)
                            .frame(minWidth: 0, maxWidth: 450)
                    }
                    else {
                        Text("–ò–∑–º–µ–Ω–∏—Ç—å")
                    }
                })
                .disabled((profileData.firstName == profileData.realFirstName && profileData.secondName == profileData.realSecondName) || profileData.firstName.isEmpty || profileData.secondName.isEmpty)
                .animation(.easeInOut)
            }
            Section(footer:
                        
                        Text(Apphud.hasActiveSubscription() ? "" : ("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Dentor Premium.".localized + " ")) + Text("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–≤–æ–ª–∏—Ç –í–∞–º –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–¥ –¥—Ä—É–≥–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –≤ Dentor –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (ICS —Ñ–∞–π–ª).")
            ) {
                if !isProviderSocial {
                    Button(action: {
                        profileData.isPasswordPresented = true
                    }, label: {
                        Text("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")
                            .foregroundColor(Color("Black1"))
                    })
                }
                NavigationLink(destination: ImportEvents()) {
                    Text("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏")
                }
                NavigationLink(destination: ExportEvents(), label: {
                    Text("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏")
                })
                .disabled(!Apphud.hasActiveSubscription())
            }
            Section {
                if Apphud.hasActiveSubscription() {
                    if let subscription = Apphud.subscription() {
                        HStack {
                            Text("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:")
                                .lineLimit(1)
                                .minimumScaleFactor(0.7)
                            Spacer()
                            Text(stringFromDate(date: subscription.expiresDate, formatString: "d MMMM YYYY"))
                                .foregroundColor(.systemGray)
                        }
                    }
                } else {
                    Button(action: {
                        profileData.isSheetPresented.toggle()
                    }, label: {
                        Text("–ü–æ–¥–ø–∏—Å–∫–∞")
                    })
                }
                #if DEBUG
                Button(action: {
                    Amplify.DataStore.start { result in
                        switch result {
                        case .success:
                            print("DataStore started")
                        case .failure(let error):
                            print("Error starting DataStore: \(error)")
                        }
                    }
                }, label: {
                    Text("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
                })
                Button(action: {
                    Amplify.DataStore.clear()
                }, label: {
                    Text("–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                })
                Button {
                    fatalError("Testing")
                } label: {
                    Text("Crash")
                }

                #endif
            }
            Section {
                Button(action: {
                    isAlertPresented = true
                }, label: {
                    Text("–í—ã–π—Ç–∏").foregroundColor(.red)
                })
            }
            .sheet(isPresented: $profileData.isPasswordPresented, content: {
                ProfileSettingsUserDataView()
            })
            
        }
        .alert(isPresented: $isAlertPresented, content: {
            Alert(title: Text("–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"), message: Text("–ï—Å–ª–∏ –≤—ã –≤—ã–π–¥–µ—Ç–µ –∏–∑ —Å–≤–æ–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏, –≤—Å–µ –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã."), primaryButton: .cancel(), secondaryButton: .destructive(Text("–í—ã–π—Ç–∏"), action: {
                withAnimation {
                    sessionManager.signOut { (err) in
                        if err != nil {
                            self.profileData.error = err!
                            self.profileData.isAlertPresented = true
                        } else {
                            DispatchQueue.main.async {
                                Apphud.logout()
                                isProviderSocial = false
                            }
                        }
                        
                    }
                }
                
            }))
        })
        .navigationBarColor(backgroundColor: UIColor(named: "Blue")!, tintColor: .white)
        .navigationBarTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", displayMode: .large)
        .sheet(isPresented: $profileData.isSheetPresented, content: {
            BuySubscriptionView()
        })
        .transition(.opacity)
    }
}

struct ProfileSettingsView_Previews: PreviewProvider {
    static var previews: some View {
        ProfileSettingsView()
    }
}
